FrooxEngine.LogiX.Network.EscapeUriDataString:#############################################################################
{
Escapes dissallowed uri characters into uri escapes which allows you to send the output string over the network without issues.
For example `Hello World!` turns into `Hello%20World%21`.
}
FrooxEngine.LogiX.Network.UnescapeUriDataString
{
Unescapes uri escape characters into their original forms which allows you to easily read output from the network.
For example `Hello%20World%21` turns into `Hello World!`.
}
FrooxEngine.LogiX.Network.IsHostAccessAllowed:#############################################################################
FrooxEngine.LogiX.Network.IsHostAccessAllowedUrl
{
Checks whether a user has allowed host access to a provided domain.

In neos by default you cannot perform web request to arbitrary domains, to do this each user has to explicitly allow each domain that you want to perform requests to.
}
FrooxEngine.LogiX.Network.RequestHostAccessBase:#############################################################################
{
this node isn't even supposed to exist. why are you here, get out, pick a normal node instead like smooth lerp or something
}
FrooxEngine.LogiX.Network.RequestHostAccessUrl:#############################################################################
{
Prompts the user with a popup asking if the user wants to allow neos to make web requests to a provided domain.

In neos by default you cannot perform web request to arbitrary domains, to do this each user has to explicitly allow each domain that you want to perform requests to.
}

FrooxEngine.LogiX.Network.WebsocketBaseNode // abstract
FrooxEngine.LogiX.Network.WebsocketConnectionEvents:######################################################
{
The <color=#00FF00>Websocket Connection Events</color> node provides impulses that indicate if a given 
Websocket Client has successfully connected, failed to connect, or was otherwise disconnected

Usage

After initiating a connection with the Websocket Connect node, this node will provide an impulse indicating 
if the connection was successful, or if it failed.

Once a Connectedimpulse is received, other WebSocket nodes can be used to communicate with the endpoint, 
such as the Websocket Text Message Sender and Websocket Text Message Receiver

A Disconnected impluse indicates that the Websocket was disconnected, or the connection was rejected by 
the user specified in Client 
}
FrooxEngine.LogiX.Network.WebsocketTextMessageReceiver:#####################################################
{
The <color=#00FF00>Websocket Text Message Receiver</color> node indicates when the Websocket endpoint 
specified by Client has received data. 
}
FrooxEngine.LogiX.Network.WebsocketConnect:##################################################################
{
The <color=#00FF00>Websocket Connect</color> node allows the User specified in HandlingUser to connect 
to a websocket endpoint, as defined by Client

Usage

This node must be used in conjunction with other WebSocket nodes to establish communication with an endpoint, 
which is defined by a Websocket Client component that is passed to the Client input.

The OnConnectStart impulse signifies that the Client has started the connection process - it does *not* mean 
that the client has successfully connected.

Connection success/fail events are provided by the Websocket Connection Events Node 
}
FrooxEngine.LogiX.Network.WebsocketTextMessageSender:#########################################################
{
The <color=#00FF00>Websocket Text Message Sender</color> node sends a string specified by Data to the 
websocket endpoint specified by Client

Usage

Once a connection has been initialized by a Websocket Connect node, and the Connected event has been 
received on a Websocket Connection Events node, this node can be used to send strings to the target endpoint.

OnSendStart indicates that the Data string has began transmitting.

OnSent indicates that the Data string has finished transmitting successfully.

OnSendError indicates that the Data string failed to transmit - either the socket is no longer connected, 
or some other error occurred during transmission.

If the send was successful, SentData contains the string that was originally given as Data - this is useful 
in cases where Data's value has changed between the Send impulse, and the OnSent impulse. 
}



FrooxEngine.LogiX.Network.RequestHostAccess:################################################################
{
The <color=#00FF00>Request Host Access</color> node informs the user that owns the Request impulse that you wish to connect to a particular host, and allows them to grant or deny access.
Usage

When given a Request impulse, the following will occur:

    If the user has previously granted access to this host, OnGranted will immediately fire
    If the user has previously denied access to this host, OnDenied will immediately fire, and any attempt to connect to this host will fail
    If the user has not previously granted or denied access, or has closed the prompt without selecting an option before, they will be presented with a prompt displaying the Host and Reason, and given the option to Allow or Reject the connection.
        If allowed, OnGranted will fire, and no further prompts will be displayed.
        If rejected, OnDenied will fire, and no further prompts will be displayed, and any attempt to connect to this host will fail
        If dismissed, no impulse will fire, and any future host access requests will result in the prompt being shown again.

Host should contain only the host portion of the URL you wish to connect to.

For example, if you wanted to perform a GET request to https://wiki.neos.com/index.php, you would provide wiki.neos.com as the Host parameter.

Reason should provide a clear and concise reason for wanting to connect to the external service - It should include an obvious title or description of the object that is attempting to establish the connection, so that the user is aware of what item in the world is prompting the connection.

The object should also have some way of indicating that it did not successfully connect to the target service, and that it will not function as intended, if at all. 
}



FrooxEngine.LogiX.Network.GET_String:#######################################################################
{
The <color=#00FF00>GET String</color> node makes an HTTP GET Request to a given URL, and upon success returns the result as a String
Usage

Before using this node, check if the user allows connections to this host using the Is Host Access Allowed node. If access is not already granted, it can be requested using the Request Host Access node

Executing a HTTP request without being granted access will result in the request failing.

    URL is the full host path to which a HTTP GET request will be sent
    OnSent indicates that the request has been sent, but has not yet received a response.
    OnResponse indicates that the remote server has responded. Any text returned by the server will be available in Content, and StatusCode will indicate any errors the remote server encountered while handling this request.
    OnError indicates that there was an error connecting to the remote server.
    Content contains any string returned by the server in the response body.
    StatusCode contains the HTTP Status Code of the response. Normally, this will be 200/OK to indicate success.
}
FrooxEngine.LogiX.Network.POST_String:#####################################################################
{
<color=#00FF00>Post String</color> logix node requires you to specify the type of data being send to the server 
}



